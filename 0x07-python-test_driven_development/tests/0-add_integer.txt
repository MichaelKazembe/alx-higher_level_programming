import doctest

def add_integer(a, b=98):
    """
    Add two integers.

    Args:
        a (int or float): First integer or float.
        b (int or float, optional): Second integer or float. Defaults to 98.

    Returns:
        int: The sum of a and b.

    Raises:
        TypeError: If a or b is not an integer or float.

    Examples:
        >>> add_integer(3, 5)
        8

        >>> add_integer(3.2, 8.5)
        11

        >>> add_integer(-5, -5)
        -10

        >>> add_integer(-5.8, -11.5)
        -17

        >>> add_integer(-3, 5)
        2

        >>> add_integer(3, -5)
        -2

        >>> add_integer(-3.9, 5.6)
        1

        >>> add_integer(3.7, -5.3)
        -1

        >>> add_integer(-10, 6)
        -4

        >>> add_integer(7, -5)
        2

        >>> add_integer(17892809999999999999990990999999999, 97)
        17892809999999999999990991000000096

        >>> add_integer(1789280935652464269.67535355, 1)
        1789280935652464270

        >>> add_integer(0.0, 0.0)
        0

        >>> add_integer(0, 0)
        0

        >>> add_integer(6)
        104

        >>> add_integer(61, )
        159

        >>> add_integer(-17.5, )
        80

        >>> add_integer()
        Traceback (most recent call last):
        ...
        TypeError: add_integer() missing 1 required positional argument: 'a'

        >>> add_integer(4, 5, -9)
        Traceback (most recent call last):
        ...
        TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given

        >>> add_integer(4, "goal")
        Traceback (most recent call last):
        ...
        TypeError: a must be an integer or b must be an integer

if __name__ == "__main__":
    doctest.testmod()
