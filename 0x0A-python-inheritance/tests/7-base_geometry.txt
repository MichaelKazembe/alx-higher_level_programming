The ``7-base_geometry`` module
============================

Using ``BaseGeometry``
---------------------

This module defines a class ``BaseGeometry``

-------------------------------------------------------------------------

Importing the function from the module:
    >>> BaseGeometry = __import__("7-base_geometry").BaseGeometry

Checks module docstring:
    >>> docstr = __import__("7-base_geometry").__doc__
    >>> len(docstr) > 1
    True

Checks for function docstring:
    >>> funct = __import__("7-base_geometry").BaseGeometry.__doc__
    >>> len(funct) > 1
    True

Examples:
---------

>>> b = BaseGeometry()
>>> b.area()
Traceback (most recent call last):
    ...
Exception: area() is not implemented

>>> b.integer_validator("name1", 5)

>>> b.integer_validator(5, "name2")
Traceback (most recent call last):
    ...
TypeError: <name> must be an integer

>>> b.integer_validator(5, 5)

>>> b.integer_validator("5", "5")
Traceback (most recent call last):
    ...
TypeError: <name> must be an integer

>>> b.integer_validator()
Traceback (most recent call last):
    ...
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> b.integer_validator("Name3", -2)
Traceback (most recent call last):
    ...
ValueError: <name> must be greater than 0

>>> b.integer_validator("Name4", 0)
Traceback (most recent call last):
    ...
ValueError: <name> must be greater than 0

>>> b.integer_validator(5, 5000)

>>> b.integer_validator(5, [2, 5])
Traceback (most recent call last):
    ...
TypeError: <name> must be an integer

>>> b.integer_validator(["set"], [2, 5])
Traceback (most recent call last):
    ...
TypeError: <name> must be an integer
